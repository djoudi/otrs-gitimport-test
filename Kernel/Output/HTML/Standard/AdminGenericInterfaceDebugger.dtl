# --
# AdminGenericInterfaceDebugger.dtl - provides HTML form for AdminLog
# Copyright (C) 2001-2011 OTRS AG, http://otrs.org/
# --
# $Id: AdminGenericInterfaceDebugger.dtl,v 1.3 2011-05-04 10:18:00 mg Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --
<div class="MainBox ARIARoleMain LayoutFixedSidebar SidebarFirst">
    <h1>$Text{"System Log"}</h1>

    <div class="SidebarColumn">
        <div class="WidgetSimple">
            <div class="Header">
                <h2>$Text{"Actions"}</h2>
            </div>
            <div class="Content">
                <ul class="ActionList">
                    <li>
                        <a href="$Env{"Baselink"}Action=$Env{"Action"}" class="CallForAction"><span>$Text{"Go back to webservice"}</span></a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="ContentColumn">

        <div class="WidgetSimple">
            <div class="Header">
                <h2>$Text{"Debugger Details"}</h2>
            </div>
            <div class="Content">
                <h3>$Text{"Select Request"}</h3>

                <div class="LayoutGrid ColumnsWithSpacing">
                    <div class="Size1of2">
                        <table class="DataTable" id="RequestList">
                            <thead>
                                <tr>
                                    <th>$Text{"Type"}</th>
                                    <th>$Text{"Time"}</th>
                                    <th>$Text{"Remote IP"}</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="3">$Text{"Loading"}...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="Size1of2">
                        <fieldset class="TableLike">
                            <label>$Text{"Filter by type"}:</label>
                            <div class="Field">
                                <input type="checkbox" name="TypeRequester" checked="checked" /><label for="TypeRequester">$Text{"Requester"}</label><br/>
                                <input type="checkbox" name="TypeProvider" checked="checked" /><label for="TypeProvider">$Text{"Provider"}</label>
                            </div>
                            <div class="Clear"></div>

                            <label>$Text{"Filter by date"}:</label>
                            <div class="Field">
                                <label>$Text{"From"}</label> ... <label>$Text{"to"}</label> ...
                            </div>
                            <div class="Clear"></div>

                            <label>$Text{"Filter by remote IP"}:</label>
                            <div class="Field">
                                <input type="text" class="w50pc" />
                            </div>
                            <div class="Clear"></div>
                        </fieldset>

                    </div>
                    <div class="Clear"></div>
                </div>
            </div>
        </div>

        <div class="WidgetSimple Hidden" id="CommunicationDetails">
            <div class="Header">
                <h2>$Text{"Communication Details"}</h2>
            </div>
            <div class="Content"></div>
        </div>
    </div>
    <div class="Clear"></div>
</div>

<!-- dtl:js_on_document_complete -->
<script type="text/javascript">//<![CDATA[

Core.Agent.Admin = Core.Agent.Admin || {};

Core.Agent.Admin.AdminGenericInterfaceDebugger = {};

Core.Agent.Admin.AdminGenericInterfaceDebugger.GetRequestList = function() {
    var Data = {
        Action: 'AdminGenericInterfaceDebugger',
        Subaction: 'GetRequestList',
        WebserviceID: parseInt('$QData{"WebserviceID"}', 10)
    };

    Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), Data, function (Response) {
        if (!Response || !Response.LogData) {
            alert('$JSText{"Error during communication."}');
        }

        if (!Response.LogData.length) {
            $('#RequestList tbody').empty().append('<tr><td colspan="3">$JSText{"No data found."}</td></tr>');
        }
        else {
            $('#RequestList tbody').empty();

            $.each(Response.LogData, function(){
                var $Tr = $('<tr></tr>');

                $Tr.append('<td><a href="#" class="AsBlock">' + this.CommunicationType + '<input type="hidden" class="CommunicationID" value="' + this.CommunicationID + '" /></a></td>');
                $Tr.append('<td><a href="#" class="AsBlock">' + this.Created + '</a></td>');
                $Tr.append('<td><a href="#" class="AsBlock">' + (this.RemoteIP || '$JSText{"unknown"}') + '</a></td>');

                $('#RequestList').append($Tr);
            });

            $('#RequestList a').bind('click', function(Event) {
                var CommunicationID = $(this).blur().parents('tr').find('input.CommunicationID').val();

                Core.Agent.Admin.AdminGenericInterfaceDebugger.LoadCommunicationDetails(CommunicationID);

                return false;
            });

        }
    }, 'json');
}

Core.Agent.Admin.AdminGenericInterfaceDebugger.LoadCommunicationDetails = function(CommunicationID) {

    var Data = {
        Action: 'AdminGenericInterfaceDebugger',
        Subaction: 'GetCommunicationDetails',
        WebserviceID: parseInt('$QData{"WebserviceID"}', 10),
        CommunicationID: CommunicationID
    };

    $('#CommunicationDetails').css('visibility', 'hidden');

    Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), Data, function (Response) {
        if (!Response || !Response.LogData || !Response.LogData.Data) {
            alert('$JSText{"Error during communication."}');
            return;
        }

        $('#CommunicationDetails > .Content').empty();

        if (!Response.LogData.Data.length) {
            $('#CommunicationDetails > .Content').append('<p class="ErrorMessage">$JSText{"No data found."}</p>');
            $('#CommunicationDetails').css('visibility', 'visible').show();
        }
        else {
            $.each(Response.LogData.Data, function(){
                var $Container = $('<div class="WidgetSimple Collapsed"></div>'),
                    $Header = $('<div class="Header"></div>'),
                    $Content = $('<div class="Content"></div>');

                $Header.append('<div class="WidgetAction Toggle"><a href="#" title="$JSText{"Show or hide the content"}"></a></div>');
                $Header.append('<h3>' + this.Summary + ' (' + this.Created + ')</h3>');
                $Container.append($Header);

                if (this.Data && this.Data.length) {
                    $Content.append('<pre><code>' + this.Data + '</code></pre>');
                }
                $Container.append($Content);

                $('#CommunicationDetails > .Content').append($Container);
            });
            $('#CommunicationDetails').css('visibility', 'visible').show();
            Core.UI.InitWidgetActionToggle();
        }
    }, 'json');
}

// Load Request list on startup without active filter
Core.Agent.Admin.AdminGenericInterfaceDebugger.GetRequestList();

//]]></script>
<!-- dtl:js_on_document_complete -->
