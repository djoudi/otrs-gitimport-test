# --
# AdminGenericInterfaceInvokerDefault.dtl - provides HTML form for AdminLog
# Copyright (C) 2001-2011 OTRS AG, http://otrs.org/
# --
# $Id: AdminGenericInterfaceInvokerDefault.dtl,v 1.3 2011-06-25 00:25:35 cg Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --
<div class="MainBox ARIARoleMain LayoutFixedSidebar SidebarFirst AdminGenericInterfaceInvokerDefault">
<!-- dtl:block:TitleAdd -->
    <h1>$Text{"Add new Invoker to Web Service %s", "$Data{"WebserviceName"}"}</h1>
<!-- dtl:block:TitleAdd -->
<!-- dtl:block:TitleChange -->
    <h1>$Text{"Change Invoker %s of Web Service %s", "$Data{"Invoker"}", "$Data{"WebserviceName"}"}</h1>
<!-- dtl:block:TitleChange -->
<!-- breadcrumb -->
    <div class="GenericInterfaceWebserviceConfigPath">
        <h3>
            $Config{"GenericInterface::Webservice::Path::Separator"}
            <a href="$Env{"Baselink"}Action=AdminGenericInterfaceWebservice">$Text{"Web Services"}</a>

            $Config{"GenericInterface::Webservice::Path::Separator"}
            <a href="$Env{"Baselink"}Action=AdminGenericInterfaceWebservice;Subaction=Change;WebserviceID=$QData{"WebserviceID"}">$QData{"WebserviceName"}</a>

            $Config{"GenericInterface::Webservice::Path::Separator"}
<!-- dtl:block:NavigationAdd -->
            $Text{"Add new invoker"}
<!-- dtl:block:NavigationAdd -->
<!-- dtl:block:NavigationChange -->
            $Text{"Change invoker %s", "$Data{"Invoker"}"}
<!-- dtl:block:NavigationChange -->
        </h3>
    </div>

    <div class="SidebarColumn">
        <div class="WidgetSimple">
            <div class="Header">
                <h2>$Text{"Actions"}</h2>
            </div>
            <div class="Content">
                <ul class="ActionList">
                    <li>
                        <a href="$Env{"Baselink"}Action=AdminGenericInterfaceWebservice;Subaction=Change;WebserviceID=$LQData{"WebserviceID"}" class="CallForAction"><span>$Text{"Go back to web service"}</span></a>
                    </li>
<!-- dtl:block:ActionListDelete -->
                    <li>
                        <button class="CallForAction Trash W75pc" type="button" id="DeleteButton"><span>$Text{"Delete"}</span></button>
                        <div class="Hidden" id="DeleteDialogContainer">
                            <p id="DeleteDialog" class="Warning">
                                $Text{"Do you really want to delete this invoker? All configuration data will be lost."}
                            </p>
                        </div>
                    </li>
<!-- dtl:block:ActionListDelete -->
                </ul>
            </div>
        </div>
    </div>
    <div class="ContentColumn">

        <div class="WidgetSimple">
            <div class="Header">
                <h2>$Text{"Invoker Details"}</h2>
            </div>
            <div class="Content">
                <form action="$Env{"CGIHandle"}" class="Validate" method="post">
                    <input type="hidden" name="Action" value="AdminGenericInterfaceInvokerDefault" />
                    <input type="hidden" name="Subaction" value="$QData{"Mode"}Action" />
                    <input type="hidden" name="WebserviceID" value="$QData{"WebserviceID"}" />
                    <input type="hidden" name="InvokerType" value="$QData{"InvokerType"}" />

                    <fieldset class="TableLike">
                        <label for="Invoker" class="Mandatory">
                            <span class="Marker">*</span>
                            $Text{"Name"}:
                        </label>
                        <div class="Field">
                            <input type="text" class="W50pc RegisterChange Validate_Required $QData{"InvokerServerError"}" maxlength="200" id="Invoker" name="Invoker" value="$QData{"Invoker"}" />
                            <input type="hidden" id="OldInvoker" name="OldInvoker" value="$QData{"Invoker"}" />
                            <p class="FieldExplanation">
                                $Text{"The name is typically used to call up this web service invoker from a remote system."}
                            </p>
                            <div id="InvokerError" class="TooltipErrorMessage">
                                $Text{"This field is required."} $Text{"Please provide a unique name for this web service."}
                            </div>
                            <div id="InvokerServerError" class="TooltipErrorMessage">
                                $Text{"The name you entered already exists."}
                            </div>
                        </div>
                        <div class="Clear"></div>

                        <label for="Description">
                            $Text{"Description"}:
                        </label>
                        <div class="Field">
                            <input type="text" class="W50pc RegisterChange" maxlength="200" id="Description" name="Description" value="$QData{"Description"}" />
                        </div>
                        <div class="Clear"></div>

                        <label for="MappingInbound">$Text{"Mapping for incoming request data"}:</label>
                        <div class="Field">
                            $Data{"MappingInboundStrg"}
                            <input type="hidden" id="MappingInboundConfigDialog" value="$QData{"MappingInboundConfigDialog"}" />
<!-- dtl:block:MappingInboundConfigureButton -->
                            <button type="button" class="HideOnChange" id="MappingInboundConfigureButton" value="$Text{"Configure"}">$Text{"Configure"}</button>
<!-- dtl:js_on_document_complete -->
<script type="text/javascript">//<![CDATA[
$('#MappingInboundConfigureButton').bind('click', function(){
    var URL;

    if ($('#MappingInboundConfigDialog').val()) {
        URL = Core.Config.Get('Baselink') + 'Action=' + $('#MappingInboundConfigDialog').val();
        URL += ';Subaction=Change;Invoker=' + $('#OldInvoker').val() + ';Direction=MappingInbound';
        window.location.href = URL;
    }
});
//]]></script>
<!-- dtl:js_on_document_complete -->
<!-- dtl:block:MappingInboundConfigureButton -->
                            <p class="FieldExplanation">
                                $Text{"The request data will be processed by this mapping, allowing it to map it to the kind of data OTRS expects."}
                            </p>
                        </div>
                        <div class="Clear"></div>

                        <label for="InvokerTypeDisplay">$Text{"Invoker backend"}:</label>
                        <div class="Field">
                            <input type="text" readonly="readonly" class="W50pc" id="InvokerTypeDisplay" value="$QData{"InvokerType"}" />
                            <p class="FieldExplanation">
                                $Text{"This OTRS invoker backend module will be called internally to process the request, generating data for the response."}
                            </p>
                        </div>
                        <div class="Clear"></div>

                        <label for="MappingOutbound">$Text{"Mapping for outgoing response data"}:</label>
                        <div class="Field">
                            $Data{"MappingOutboundStrg"}
                            <input type="hidden" id="MappingOutboundConfigDialog" value="$QData{"MappingOutboundConfigDialog"}" />
<!-- dtl:block:MappingOutboundConfigureButton -->
                            <button type="button" class="HideOnChange" id="MappingOutboundConfigureButton" value="$Text{"Configure"}">$Text{"Configure"}</button>
<!-- dtl:js_on_document_complete -->
<script type="text/javascript">//<![CDATA[
$('#MappingOutboundConfigureButton').bind('click', function(){
    var URL;

    if ($('#MappingOutboundConfigDialog').val()) {
        URL = Core.Config.Get('Baselink') + 'Action=' + $('#MappingOutboundConfigDialog').val();
        URL += ';Subaction=Change;Invoker=' + $('#OldInvoker').val() + ';Direction=MappingOutbound';
        window.location.href = URL;
    }
});
//]]></script>
<!-- dtl:js_on_document_complete -->
<!-- dtl:block:MappingOutboundConfigureButton -->
                            <p class="FieldExplanation">
                                $Text{"The response data will be processed by this mapping, allowing it to map it to the kind of data the remote system expects."}
                            </p>
                        </div>
                        <div class="Clear"></div>

                        <label for="EventsTable">$Text{"Event Triggers"}:</label>
                        <div class="Field W50pc">
                            <table class="DataTable W50pc" id="EventsTable" summary="List of all configured events">
                                <thead>
                                    <tr>
                                        <th>$Text{"Event"}</th>
                                        <th>$Text{"Asynchronous"}</th>
                                        <th>$Text{"Delete"}</th>
                                    </tr>
                                </thead>
                                <tbody>
<!-- dtl:block:NoDataFoundMsg -->
                                    <tr>
                                        <td colspan="4">
                                            $Text{"No data found."}
                                        </td>
                                    </tr>
<!-- dtl:block:NoDataFoundMsg -->

<!-- dtl:block:EventRow -->
                                    <tr>
                                        <td class="AsBlock">$QData{"Event"}</td>
                                        <td>$QData{"Asynchronous"}</td>
                                        <td class="Center">
                                            <a id="DeleteEvent$QData{"Event"}" class="TrashCan DeleteEvent" href="#" title="$Text{"Delete this event"}">
                                                $Text{"Delete this event"}
                                            </a>
                                        </td>
                                    </tr>
<!--dtl:js_on_document_complete-->
<script type="text/javascript">//<![CDATA[
/*global Core.Agent: true */
    Core.Agent.Admin.GenericInterfaceInvoker.BindDeleteEventDialog({
        ElementID:                  'DeleteEvent$QData{"Event"}',
        EventName:                  '$QData{"Event"}',
        ElementSelector:            '#DeleteEvent$QData{"Event"}',
    });
//]]></script>
<!--dtl:js_on_document_complete-->
<!-- dtl:block:EventRow -->
                                </tbody>
                            </table>
                            <p class="FieldExplanation">
                                $Text{"This invoker will be triggered by the events from the table above"}.
                            </p>
                        </div>

                        <div class="Hidden" id="DeleteEventDialogContainer">
                            <div id ="DeleteEventDialog" class="InnerContent GenericInterfaceDialog">
                                <span class="WarningDialog ">&nbsp;</span>
                                <p class="Center Warning">$Text{"Are you sure to that you want to delete this event trigger?"}</p>
                                <div class="SpacingTop"></div>
                            </div>
                        </div>

                        <div class="SpacingTop"></div>
                        <label class="HideOnChange" for="EventType">Add Event Trigger:</label>
                        <div class="Field HideOnChange">
                            $Data{"EventTypeStrg"}
<!-- dtl:block:EventAdd -->
                            $Data{"EventStrg"}
<!-- dtl:block:EventAdd -->
                            <input type="checkbox" id="Asynchronous" checked="checked" class="GenericInterfaceSpacing" name="Asynchronous"/><span>Asynchronus</span>
                            <button type="button" id="AddEvent" class="Add GenericInterfaceSpacing" name="AddEvent" value="Add Event">Add Event</button>
                            <p class="FieldExplanation">
                                $Text{"To add a new event select the event object and event name set asynchronous or not and click on the "+" button"}.
                            </p>
                            <p class="FieldExplanation">
                                $Text{"Asynchronous events are handled by the OTRS Scheduler in background. This is recommended for most of the invokers"}.
                            </p>
                        </div>
                        <div class="Clear"></div>

                        <div class="Field SpacingTop">
                            <button type="submit" class="Primary" value="$Text{"Save and continue"}">$Text{"Save"}</button>
<!-- dtl:block:SaveAndFinishButton -->
                            <button type="submit" id="SaveAndFinishButton" value="$Text{"Save and finish"}">$Text{"Save and finish"}</button>
                            <input type="hidden" name="ReturnToWebservice" id="ReturnToWebservice" value="" />
<!-- dtl:js_on_document_complete -->
<script type="text/javascript">//<![CDATA[
$('#SaveAndFinishButton').bind('click', function(){
    $('#ReturnToWebservice').val(1);
});
//]]></script>
<!-- dtl:js_on_document_complete -->
<!-- dtl:block:SaveAndFinishButton -->
                            or
                            <a href="$Env{"Baselink"}Action=AdminGenericInterfaceWebservice;Subaction=Change;WebserviceID=$QData{"WebserviceID"}">$Text{"Cancel"}</a>
                        </div>
                        <div class="Clear"></div>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
    <div class="Clear"></div>
</div>

<!-- dtl:js_on_document_complete -->
<script type="text/javascript">//<![CDATA[
Core.Agent.Admin.GenericInterfaceInvoker.Init({
    WebserviceID: $QData{"WebserviceID"},
    Invoker: "$QData{"Invoker"}",
    Action: 'AdminGenericInterfaceInvokerDefault',
    EventTypeSelected: $('#EventType').val(),
    Localization: {
        CommunicationErrorMsg: '$JSText{"An error occurred during communication."}',
        DeleteInvokerMsg: '$JSText{"Delete this Invoker"}',
        DeleteEventMsg: '$JSText{"Delete this Event Trigger"}',
        DeleteMsg: '$JSText{"Delete"}',
        CancelMsg: '$JSText{"Cancel"}'
    }
});

$('.RegisterChange').bind('change.RegisterChange keyup.RegisterChange', function (Event) {
    $('.HideOnChange').hide();
    $('.ShowOnChange').show();
});

$('#DeleteButton').bind('click', Core.Agent.Admin.GenericInterfaceInvoker.ShowDeleteDialog);

$('#EventType').bind('change', function (){
    Core.Agent.Admin.GenericInterfaceInvoker.ToogleEventSelect($(this).val());
});

$('#AddEvent').bind('click', function (){
    Core.Agent.Admin.GenericInterfaceInvoker.AddEvent( $('#EventType').val() );
});

Core.Agent.Admin.GenericInterfaceInvoker.ToogleEventSelect( $('#EventType').val() );

//]]></script>


<!-- dtl:js_on_document_complete -->
