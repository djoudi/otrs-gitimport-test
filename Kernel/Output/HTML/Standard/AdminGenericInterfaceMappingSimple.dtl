# --
# AdminGenericInterfaceMappingSimple.dtl - provides HTML form for AdminLog
# Copyright (C) 2001-2011 OTRS AG, http://otrs.org/
# --
# $Id: AdminGenericInterfaceMappingSimple.dtl,v 1.3 2011-06-03 23:09:52 cg Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --
<div class="MainBox ARIARoleMain LayoutFixedSidebar SidebarFirst AdminGenericInterfaceMappingSimple">
    <h1>$Text{"GenericInterface Mapping Simple for Web Service %s", "$Data{"WebserviceName"}"}</h1>
    <div class="GenericInterfaceWebserviceConfigPath">
        <h3>
            $Config{"GenericInterface::Webservice::Path::Separator"}
            <a href="$Env{"Baselink"}Action=AdminGenericInterfaceWebservice">$Text{"Web Services"}</a>

            $Config{"GenericInterface::Webservice::Path::Separator"}
            <a href="$Env{"Baselink"}Action=AdminGenericInterfaceWebservice;Subaction=Change;WebserviceID=$QData{"WebserviceID"}">$QData{"WebserviceName"}</a>

        </h3>
    </div>

    <div class="SidebarColumn">
        <div class="WidgetSimple">
            <div class="Header">
                <h2>$Text{"Actions"}</h2>
            </div>
            <div class="Content">
                <ul class="ActionList">
                    <li>
                        <a href="$Env{"Baselink"}Action=AdminGenericInterfaceWebservice;Subaction=Change;WebserviceID=$LQData{"WebserviceID"}" class="CallForAction"><span>$Text{"Go back to web service"}</span></a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="ContentColumn">

        <div class="WidgetSimple">
            <div class="Header">
                <h2>$Text{"Mapping Simple"}</h2>
            </div>
            <div class="Content">
                <form action="$Env{"CGIHandle"}" method="post" class="Validate PreventMultipleSubmits">
                    <input type="hidden" name="Action" value="$Env{"Action"}"/>
                    <input type="hidden" name="Subaction" value="$QData{"Subaction"}Action"/>
                    <input type="hidden" name="WebserviceID" value="$QData{"WebserviceID"}" id="WebserviceID"/>
                    <input type="hidden" name="CommunicationType" value="$QData{"CommunicationType"}" />
                    <input type="hidden" name="Operation" value="$QData{"Operation"}" />
                    <input type="hidden" name="Invoker" value="$QData{"Invoker"}" />
                    <input type="hidden" name="Direction" value="$QData{"Direction"}" "/>
<!-- dtl:block:KeyCounter -->
                    <input type="hidden" name="KeyCounter" id="KeyCounter" value="$QData{"KeyIndex"}" />
<!-- dtl:block:KeyCounter -->
                    <fieldset class="TableLike  SpacingTop">
                        <label for="DefaultKeyType">$Text{"Default rule for unmapped keys"}:</label>
                        <div class="Field">
                            $Data{"DefaultKeyTypeStrg"}
                            <input id="DefaultKeyMapTo" name="DefaultKeyMapTo" class="W25pc $QData{"DefaultKeyMapToHidden"}" type="text" maxlength="100" value="$QData{"DefaultKeyMapTo"}"/>
                            <p class="FieldExplanation">$Text{"This rule will apply for all keys with no mapping rule."}</p>
                        </div>
                        <div class="Clear"></div>

                        <label for="DefaultKeyType">$Text{"Default rule for unmapped values"}:</label>
                        <div class="Field">
                            $Data{"DefaultValueTypeStrg"}
                            <input id="DefaultValueMapTo"name="DefaultValueMapTo"  class="W25pc $QData{"DefaultValueMapToHidden"}" type="text" maxlength="100" value="$QData{"DefaultValueMapTo"}"/>
                            <p class="FieldExplanation">$Text{"This rule will apply for all values with no mapping rule."}</p>
                        </div>
                        <div class="Clear"></div>

                        <label for="DefaultKeyType">$Text{"New key map"}:</label>
                        <div class="Field">
                            <span class="NewRule">
                                <button type="button" id="AddKeyMapping" class="Add" value="Add key mapping">$Text{"Add key mapping"}</button>
                            </span>
                        </div>
                        <div class="Clear Spacing"></div>
                    </fieldset>
                    <div class="Content Spacing" id="KeyInsert">

<!-- dtl:block:KeyTemplate -->
                        <div class="WidgetSimple Expanded WidgetKey $QData{"Classes"}">
                            <div class="Header">
                                <div class="WidgetAction Toggle">
                                    <a href="#" title="$JSText{"Show or hide the content"}"></a>
                                </div>
                                <h3 class="Title">$Text{"Mapping for Key "} $QData{"KeyMapNew"}</h3>
                                <div class="AdditionalInformation SpacingTopMini">
                                    <button type="button" id="RemoveKeyMapping" class="Remove" value="Remove key mapping">$Text{"Remove key mapping"}</button>
                                </div>
                            </div>
                            <div class="Content">

                                <fieldset class="TableLike FixedLabelSmall">
                                    <label>$Text{"Key mapping"}:</label>
                                    <div class="Field">
                                        Map key matching the
                                        $Data{"KeyMapTypeStrg"}
                                        <input name="KeyName$QData{"KeyIndex"}" id="KeyName$QData{"KeyIndex"}" class="W20pc" type="text" maxlength="100" value="$QData{"KeyName"}"/>
                                        to new name
                                        <input name="KeyMapNew$QData{"KeyIndex"}" id="KeyMapNew$QData{"KeyIndex"}" class="W20pc NewValue" type="text" maxlength="100" value="$QData{"KeyMapNew"}"/>
                                    </div>
                                    <div class="Clear"></div>

                                    <label>Value Mapping</label>
                                    <div class="Field ValueInsert">
<!-- dtl:block:ValueTemplateRowIndex -->
                                        <input type="hidden" name="ValueCounter$QData{"KeyIndex"}" value="$QData{"ValueIndex"}" id="ValueCounter$QData{"KeyIndex"}" class="ValueCounter" />
<!-- dtl:block:ValueTemplateRowIndex -->
                                        <div class="Spacing"></div>
<!-- dtl:block:ValueTemplateRow -->
                                        <div class="ValueTemplateRow">
                                            Map values matching the
                                            $Data{"ValueMapTypeStrg"}
                                            <input name="ValueName$QData{"KeyIndex"}_$QData{"ValueIndex"}" id="ValueName$QData{"KeyIndex"}_$QData{"ValueIndex"}" class="W20pc" type="text" maxlength="100" value="$QData{"ValueName"}"/>
                                            to new value
                                            <input name="ValueMapNew$QData{"KeyIndex"}_$QData{"ValueIndex"}" id="ValueMapNew$QData{"KeyIndex"}_$QData{"ValueIndex"}" class="W20pc" type="text" maxlength="100" value="$QData{"ValueMapNew"}"/>
                                            <span class="Spacing"></span>
                                            <button type="button" id="RemoveValueMapping$QData{"KeyIndex"}_$QData{"ValueIndex"}" class="Remove ValueRemove" value="Remove value mapping">$Text{"Remove value mapping"}</button>
                                        </div>
<!-- dtl:block:ValueTemplateRow -->
                                    </div>
                                    <div class="Clear"></div>

                                    <label for="DefaultKeyType">$Text{"New key map"}:</label>
                                    <div class="Field">
                                        <span class="NewValueMap">
                                            <button type="button" id="AddValueMapping$QData{"KeyIndex"}" class="Add ValueAdd" value="Add Value mapping">$Text{"Add value mapping"}</button>
                                        </span>
                                    </div>
                                    <div class="Clear"></div>
                                </fieldset>
                            </div>
                        </div>
<!-- dtl:block:KeyTemplate -->

<!-- dtl:block:ValueTemplate -->
                        <div class="ValueTemplate Hidden">
                            Map values matching the
                            $Data{"ValueMapTypeStrg"}
                            <input name="ValueName" id="ValueName" class="W20pc" type="text" maxlength="100" value=""/>
                            to new value
                            <input name="ValueMapNew" id="ValueMapNew" class="W20pc" type="text" maxlength="100" value=""/>
                            <span class="Spacing"></span>
                            <button type="button" id="RemoveValueMapping" class="Remove ValueRemove" value="Remove value mapping">$Text{"Remove value mapping"}</button>
                        </div>
<!-- dtl:block:ValueTemplate -->

                    </div>

                    <div class="Field Spacing">
                        <button class="Primary" type="submit" value="$Text{"Submit"}">$Text{"Submit"}</button>
                        $Text{"or"}
                        <a href="$Env{"Baselink"}Action=AdminGenericInterfaceWebservice;Subaction=Change;WebserviceID=$LQData{"WebserviceID"}">$Text{"Cancel"}</a>
                    </div>
                    <div class="Clear"></div>

                </form>
            </div>
        </div>

    </div>

</div>


<!-- dtl:js_on_document_complete -->
<script type="text/javascript">//<![CDATA[
function ToggleMapTo(Object) {
    if (Object.val() != 'MapTo') {
        Object.next().addClass('Hidden');
        Object.next().removeClass('Validate_Required');
    }
    else {
        Object.next().removeClass('Hidden');
        Object.next().addClass('Validate_Required');
    }
}

function AddValueMapping(ValueInsert, KeyCounter) {

        // clone key dialog
        var $Clone = $('.ValueTemplate').clone(),
            ValueCounter = $('#ValueCounter' + KeyCounter).val();

        // increment key counter
        ValueCounter ++;

        // remove unnecessary classes
        $Clone.removeClass('Hidden ValueTemplate');

        // copy values and change ids and names
        $Clone.find(':input').each(function(){
            var ID = $(this).attr('id');
            $(this).attr('id', ID + KeyCounter + '_' + ValueCounter);
            $(this).attr('name', ID + KeyCounter + '_' +ValueCounter);

            // add event handler to remove button
            if( $(this).hasClass('Remove') ) {
                // bind click function to add button
                $(this).bind('click', function () {
                    $(this).parent().remove();
                    return false;
                });
            }
        });

        // append to container
        ValueInsert.append($Clone);

        // set new value for KeyCounter
        $('#ValueCounter' + KeyCounter).val(ValueCounter);

    return false;
};


function AddKeyMapping() {

        // clone key dialog
        var $Clone = $('.KeyTemplate').clone(),
            KeyCounter = $('#KeyCounter').val();

        // increment key counter
        KeyCounter ++;

        // remove unnecessary classes
        $Clone.removeClass('Hidden KeyTemplate');

        // add title
        $Clone.find('.Title').html('Mapping for Key');

        // copy values and change ids and names
        $Clone.find(':input').each(function(){
            var ID = $(this).attr('id');
            $(this).attr('id', ID + KeyCounter);
            $(this).attr('name', ID + KeyCounter);

            // add event handler to Add button
            if( $(this).hasClass('Add') ) {
                // bind click function to add button
                $(this).bind('click', function () {
                    AddValueMapping( $(this).closest('fieldset').find('.ValueInsert'), KeyCounter );
                    return false;
                });
            }

            if( $(this).hasClass('Remove') ) {
                // bind click function to add button
                $(this).bind('click', function () {
                    if( confirm ('Do you really want to delete this key mapping?') ) {
                        $(this).closest('.WidgetKey').remove();
                    }
                    return false;
                });
            }

            if($(this).hasClass('DefaultType')) {
                $(this).bind('change', function(){
                    // call function to hide or show
                    // MapTo field
                    ToggleMapTo($(this));
                });
            }

            if($(this).hasClass('NewValue')) {
                $(this).bind('change', function(){
                    // modified title
                    $(this).closest('.WidgetKey').find('.Title').html( 'Mapping for Key ' + $(this).val() );
                });
            }
        });

        // append to container
        $('#KeyInsert').append($Clone);

        // reset template row values
        $('.NewRule').find(':input:not(:button)').attr('value','');
        $('#KeyMapTypeStrg' + KeyCounter).focus();

        // set new value for KeyCounter
        $('#KeyCounter').val(KeyCounter);

        // init toggle action
        Core.UI.InitWidgetActionToggle();
    return false;
};


$('.DefaultType').bind('change', function(){
    // call function to hide or show
    // MapTo field
    ToggleMapTo($(this));
});

// register add of attribute
$('#AddKeyMapping').bind('click', function () {
    AddKeyMapping();
    return false;
});

// register change new key name action
$('.NewValue').bind('change', function(){
    // modified title
    $(this).closest('.WidgetKey').find('.Title').html( 'Mapping for Key ' + $(this).val() );
});


// register remove key action
$('.AdditionalInformation .Remove').bind('click', function () {
    if( confirm ('Do you really want to delete this key mapping?') ) {
        $(this).closest('.WidgetKey').remove();
    }
    return false;
});

//bind click function to add button
$('.ValueAdd').bind('click', function () {
    AddValueMapping(
        $(this).closest('fieldset').find('.ValueInsert'),
        $(this).closest('fieldset').find('.ValueCounter').val()
    );
    return false;
});

//bind click function to add button
$('.ValueRemove').bind('click', function () {
    $(this).parent().remove();
    return false;
});

//]]></script>
<!-- dtl:js_on_document_complete -->
