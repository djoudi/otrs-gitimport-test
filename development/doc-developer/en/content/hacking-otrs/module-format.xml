<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!-- $Id: module-format.xml,v 1.2 2011-07-26 17:01:01 cr Exp $ -->

<section>
    <title>Module Format</title>

    <section id="core-modules">
        <title>Core Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/agent-auth.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/auth-sync.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/customer-auth.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/customer-user-preferences.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/log.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/outputfilter.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/queue-preferences.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/service-preferences.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/sla-preferences.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/stats.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/virtualfs.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/ticketnumber-generator.xml" />
    </section>

    <section id="frontend-modules">
        <title>Frontend Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/dashboard.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/notify.xml" />
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/ticket-menu.xml" />
    </section>

    <section id="genericinterface-transport-modules">
        <title>Generic Interface Transport Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/transport.xml" />
    </section>
    <section id="genericinterface-mapping-modules">
        <title>Generic Interface Mapping Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/mapping.xml" />
    </section>
    <section id="genericinterface-invoker-modules">
        <title>Generic Interface Invoker Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/invoker.xml" />
    </section>
    <section id="genericinterface-operation-modules">
        <title>Generic Interface Operation Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/operation.xml" />
    </section>
    <section id="schedurler-taskhandler-modules">
        <title>Scheduler Task Handler Modules</title>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/task-handler.xml" />
    </section>
    <section id="old-module-description">
        <title>Old Module Descriptions</title>
        <para>Please remove these old sections if newer ones were created.</para>
    <section id="module-navigation">
        <title>Navigation Module</title>
        <para>
In this module layer you can create dynamic navigation bar items with
dynamic content (Name and Description). Navigation Module are located under Kernel/Output/HTML/NavBar*.pm.
        </para>
        <para>
Format:
        <programlisting><![CDATA[
# --
# Kernel/Output/HTML/NavBarABC.pm - shows a navbar item dynamicaly
# Copyright (C) (year) (name of author) (email of author)
# --
# $Id: module-format.xml,v 1.2 2011-07-26 17:01:01 cr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package Kernel::Output::HTML::NavBarABC;

use strict;
use warnings;

# --
sub new {
    my ( $Type, %Param ) = @_;
    [...]
    return $Self;
}
# --
sub Run {
    my ( $Self, %Param ) = @_;
    my %Return = ();
    $Return{'0999989'} = {
        Block       => 'ItemPersonal',
        Description => 'Some Desctipton',
        Name        => 'Text',
        Image       => 'new-message.png',
        Link        => 'Action=AgentMailbox&amp;Subaction=New',
        AccessKey   => 'j',
    };
    return %Return;
}
# --
1;
        ]]></programlisting>
        </para>
        <para>
To use this module add the following code to the Kernel/Config.pm and restart
your webserver (if you use mod_perl).
        <programlisting><![CDATA[
[Kernel/Config.pm]
# agent interface notification module
$Self->{'Frontend::NavBarModule'}->{'99-ABC'} = {
    Module => 'Kernel::Output::HTML::NavBarABC',
};
        ]]></programlisting>
        </para>
    </section>
    <section id="old-frontend-modules">
        <title>Frontend Modules</title>
        <para>
Frontend Modules are located under  "$OTRS_HOME/Kernel/Modules/*.pm". There
are two public functions in there - new() and run() - which are accessed from the
Frontend Handle (e. g. index.pl). "new()" is used to create a frontend
module object. The Frontend Handle provides the used frontend module with the basic framework object.
These are, for example: ParamObject (to get formular params), DBObject
(to use existing database connects), LayoutObject (to use templates and other
html layout functions), ConfigObject (to access config settings), LogObject
(to use the framework log system), UserObject (to get the user functions from
the current user), GroupObject (to get the group functions), MainObject (to get main functions
like 'Require') and EncodeObject (for the charset encoding).
        </para>
        <para>
For more information on core modules see
<ulink url="http://dev.otrs.org/">http://dev.otrs.org/</ulink>
        </para>
        <para>
Format:
        <programlisting><![CDATA[
# --
# Kernel/Modules/AgentTest.pm - message of the day
# Copyright (C) (year) (name of author) (email of author)
# --
# $Id: module-format.xml,v 1.2 2011-07-26 17:01:01 cr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package Kernel::Modules::AgentTest;

use strict;
use warnings;

use vars qw(@ISA $VERSION);
$VERSION = qw($Revision: 1.2 $) [1];

# --
sub new {
    my ( $Type, %Param ) = @_;
    [...]
    return $Self;
}
# --
sub Run {
    my ( $Self, %Param ) = @_;
    [...]
    # ---------------------------------------------------------- #
    # add a new object (Note: dtl text 'New')
    # ---------------------------------------------------------- #
    if ($Self->{Subaction} eq 'Add') {
        my $Output   = '';
        my %Frontend = ();
        [...]
        # add add block
        $Self->{LayoutObject}->Block(
            Name => 'Add',
            Data => {%Param, %Frontend},
        );
        # build output
        $Output .= $Self->{LayoutObject}->Header(Area => 'Agent', Title => "Test");
        $Output .= $Self->{LayoutObject}->NavigationBar();
        $Output .= $Self->{LayoutObject}->Output(
            Data => {%Param, %Frontend},
            TemplateFile => 'AgentTest',
        );
        $Output .= $Self->{LayoutObject}->Footer();
        return $Output;
    }
    # ---------------------------------------------------------- #
    # show overview screen
    # ---------------------------------------------------------- #
    elsif ($Self->{Subaction} eq 'Overview') {
        # add overview block
        $Self->{LayoutObject}->Block(
            Name => 'Overview',
            Data => {%Param, %Frontend},
        );
        # build output
        $Output .= $Self->{LayoutObject}->Header(Area => 'Agent', Title => "Test");
        $Output .= $Self->{LayoutObject}->NavigationBar();
        $Output .= $Self->{LayoutObject}->Output(
            Data => {%Param, %Frontend},
            TemplateFile => 'AgentTest',
        );
        $Output .= $Self->{LayoutObject}->Footer();
        return $Output;
    }
    # ---------------------------------------------------------- #
    # show error screen
    # ---------------------------------------------------------- #
    return $Self->{LayoutObject}->ErrorScreen(Message => "Invalid Subaction process!");
}
# --
1;
        ]]></programlisting>
        </para>
        <para>
You also need a module registration for frontend modules. Define read
only groups with the "GroupRo" and read/write groups with the 'Group' param (see
table below for details). You can define navigation bar icons via the
"NavBar'"param, too (see table below for details).
        <programlisting><![CDATA[
[Kernel/Config.pm]
$Self->{'Frontend::Module'}->{'AgentTest'} = {
    Group => ['admin'],
    GroupRo => ['test', 'admin'],
    Description => 'A test Module',
    NavBarName => 'Ticket',
    NavBar => [
        {
            Description => 'Test Module',
            Name => 'Test',
            Image => 'stats.png',
            Link => 'Action=AgentTest',
            NavBar => 'Ticket',
            Prio => 85,
        },
    ],
};
        ]]></programlisting>
        </para>
        <para>
You can access this frontend module via http (browse) with the Action
param = Module or over the navigation bar.
        </para>
        <para>
            <ulink url="">http://localhost/otrs/index.pl?Action=AgentTest</ulink>
        </para>
        <para>
Description of Frontend::Module options:
        </para>
        <para>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Key</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Group</entry>
                        <entry>An ARRAY reference of rw groups of this module.</entry>
                    </row>
                    <row>
                        <entry>GroupRo</entry>
                        <entry>An ARRAY reference of ro groups of this module.</entry>
                    </row>
                    <row>
                        <entry>Description</entry>
                        <entry>Module description, just for internal use - not shown in the user interface.</entry>
                    </row>
                    <row>
                        <entry>NavBarName</entry>
                        <entry>NavBar context name of this module.</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        </para>
        <para>
Description of NavBar (icon points) options:
        </para>
        <para>
        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Key</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Description</entry>
                        <entry>The description of the icon which is shown in the navbar after the curser is pointed on it.</entry>
                    </row>
                    <row>
                        <entry>Name</entry>
                        <entry>The icon name shown in the navbar.</entry>
                    </row>
                    <row>
                        <entry>Image</entry>
                        <entry>The icon image shown in the navbar.</entry>
                    </row>
                    <row>
                        <entry>Link</entry>
                        <entry>The link behind the icon in the navbar.</entry>
                    </row>
                    <row>
                        <entry>NavBar</entry>
                        <entry>Only shown this icon in this NavBar context.</entry>
                    </row>
                    <row>
                        <entry>Prio</entry>
                        <entry>Sort prio of the icon in the navbar.</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>
        </para>
    </section>
    <section id="module-core">
        <title>Core Modules</title>
        <para>
Core modules are located under $OTRS_HOME/Kernel/System/*. This layer is for
the logical work. The modules are used to handle system routines like "lock ticket"
and "create ticket". These modules  always need pod (Perl Documentation).
        </para>
        <para>
A few common core modules are: Log (Kernel::System::Log); Ticket
(Kernel::System::Ticket), Auth (Kernel::System::Auth), User (Kernel::System::User),
Email (Kernel::System::Email).
        </para>
        <para>
For more information on the core modules see
<ulink url="http://dev.otrs.org/">http://dev.otrs.org</ulink>
        </para>
        <para>
Format:
        </para>
        <para>
        <programlisting><![CDATA[
# --
# Kernel/System/Backend.pm - a core module
# Copyright (C) (year) (name of author) (email of author)
# --
# $Id: module-format.xml,v 1.2 2011-07-26 17:01:01 cr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package Kernel::System::Backend;

use strict;
use warnings;

=head1 NAME

Kernel::System::Log - global log interface

=head1 SYNOPSIS

All log functions.

=head1 PUBLIC INTERFACE

=over 4

=item new()

create a backend object

use Kernel::Config;
use Kernel::System::Backend;

use vars qw(@ISA $VERSION);
$VERSION = qw($Revision: 1.2 $) [1];

my $ConfigObject = Kernel::Config->new();
my $BackendObject    = Kernel::System::Backend->new(ConfigObject => $ConfigObject);

=cut

sub new {
    my ( $Type, %Param ) = @_;
    [...]
    return $Self;
}

=item SomeMethodeA()

some info about the methode

$BackendObject->SomeMethodeA(ParamA => 'error', ParamB => "Need something!");

=cut

sub SomeMethodeA{
    my ( $Self, %Param ) = @_;
    [...]
    return 1;
}
1;

=head1 TERMS AND CONDITIONS

This software is part of the OTRS project (http://otrs.org/).

This software comes with ABSOLUTELY NO WARRANTY. For details, see
the enclosed file COPYING for license information (AGPL). If you
did not receive this file, see http://www.gnu.org/licenses/agpl.txt.

=head1 VERSION

$Revision: 1.2 $ $Date: 2011-07-26 17:01:01 $

=cut
        ]]></programlisting>
        </para>
    </section>
    <section id="module-customer-user">
        <title>Customer User Module</title>
        <para>
This module layer can be used as a bridge between your customer source
system and OTRS. Thus it is possible to use your customer data directly for
your data ware house (read only and read/write).
        </para>
        <para>
Format:
        </para>
        <para>
        <programlisting><![CDATA[
# --
# Kernel/System/CustomerUser/ABC.pm - a customer data backend
# Copyright (C) (year) (name of author) (email of author)
# --
# $Id: module-format.xml,v 1.2 2011-07-26 17:01:01 cr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package Kernel::System::CustomerUser::ABD;

use strict;
use warnings;

use vars qw(@ISA $VERSION);
$VERSION = qw($Revision: 1.2 $) [1];

# --
sub new {
    my ( $Type, %Param ) = @_;
    [...]
    return $Self;
}
# --
sub CustomerName {
    [...]
    return $Name;
}
# --
sub CustomerSearch {
    [...]
    return %Result;
}
# --
sub CustomerUserList {
    [...]
    return %List;
}
# --
sub CustomerIDs {
    [...]
    return @CustomerIDs;
}
# --
sub CustomerUserDataGet {
    [...]
    return %Data;
}
# --
sub CustomerUserAdd {
    [...]
    return 1
}
# --
sub CustomerUserUpdate {
    [...]
    return 1;
}
# --
sub SetPassword {
    [...]
    return 1;
}
1;
        ]]></programlisting>
        </para>
        <para>
To use this module, see the admin manual.
        </para>
    </section>
    <section id="module-customer-navigation">
        <title>Customer Navigation Module</title>
        <para>
In this module layer you can create dynamic navigation bar items with
dynamic content (Name and Description).
        </para>
        <para>
The format is the same as in the Navigation Module.
        </para>
        <para>
Just the config setting key is different. To use this module, add the following
to the Kernel/Config.pm and restart your webserver (if you use mod_perl).
        </para>
        <para>
        <programlisting><![CDATA[
[Kernel/Config.pm]
# customer notifiacation module
$Self->{'CustomerFrontend::NavBarModule'}->{'99-ABC'} = {
    Module => 'Kernel::Output::HTML::NavBarABC',
};
        ]]></programlisting>
        </para>
    </section>
    <section id="ticket-modules">
        <title>Ticket Modules</title>
        <section id="ticket-number-module">
            <title>Ticket Number Module</title>
            <para>
If you want to create your own ticket number format, just create your own ticket
number module. These modules are located under "Kernel/System/Ticket/Number/*.pm".
For default modules see the admin manual. You just need 2 functions:
CreateTicketNr() and GetTNByString():
            </para>
            <para>
Format:
            </para>
            <para>
            <programlisting><![CDATA[
# --
# Ticket/Number/Simple.pm - a ticket number auto increment generator
# Copyright (C) (year) (name of author) (email of author)
# --
# $Id: module-format.xml,v 1.2 2011-07-26 17:01:01 cr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package Kernel::System::Ticket::Number::Simple;

use strict;
use warnings;

use vars qw(@ISA $VERSION);
$VERSION = qw($Revision: 1.2 $) [1];

sub CreateTicketNr {
    my $Self = shift;
    my $JumpCounter = shift || 0;
    # get needed config options
    [...]
    return $Tn;
}
# --
sub GetTNByString {
    my $Self = shift;
    my $String = shift || return;
    [...]
    return $Tn;
}
1;
            ]]></programlisting>
            </para>
        </section>
        <section id="ticket-postmaster-module">
            <title>Ticket PostMaster Module</title>
            <para>
PostMaster modules are used during the PostMaster process.
There are two kinds of PostMaster modules. PostMasterPre (used after parsing an email)
and PostMasterPost (used after an email is processed and in the database) modules.
            </para>
            <para>
If you want to create your own postmaster filter, just create your own module.
These modules are located under "Kernel/System/PostMaster/Filter/*.pm".
For default modules see the admin manual. You just need two functions:
new() and Run():
            </para>
            <para>
The following is an examplary module to match emails and set X-OTRS-Headers
(see doc/X-OTRS-Headers.txt for more info).
            </para>
            <para>
Kernel/Config.pm:
            </para>
            <para>
            <programlisting><![CDATA[
# Job Name: 1-Match
# (block/ignore all spam email with From: noreply@)
$Self->{'PostMaster::PreFilterModule'}->{'1-Example'} = {
    Module => 'Kernel::System::PostMaster::Filter::Example',
    Match => {
        From => 'noreply@',
    },
    Set => {
        'X-OTRS-Ignore' => 'yes',
    },
};
            ]]></programlisting>
            </para>
            <para>
Format:
            </para>
            <para>
            <programlisting><![CDATA[
# --
# Kernel/System/PostMaster/Filter/Example.pm - a postmaster filter
# Copyright (C) (year) (name of author) (email of author)
# --
# $Id: module-format.xml,v 1.2 2011-07-26 17:01:01 cr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package Kernel::System::PostMaster::Filter::Example;

use strict;
use warnings;

use vars qw(@ISA $VERSION);
$VERSION = qw($Revision: 1.2 $) [1];

sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);

    $Self->{Debug} = $Param{Debug} || 0;

    # get needed objects
    for (qw(ConfigObject EncodeObject LogObject DBObject)) {
        $Self->{$_} = $Param{$_} || die "Got no $_!";
    }

    return $Self;
}

sub Run {
    my ( $Self, %Param ) = @_;
    # get config options
    my %Config = ();
    my %Match = ();
    my %Set = ();
    if ($Param{JobConfig} &amp;&amp; ref($Param{JobConfig}) eq 'HASH') {
        %Config = %{$Param{JobConfig}};
        if ($Config{Match}) {
            %Match = %{$Config{Match}};
        }
        if ($Config{Set}) {
            %Set = %{$Config{Set}};
        }
    }
    # match 'Match => ???' stuff
    my $Matched = '';
    my $MatchedNot = 0;
    for (sort keys %Match) {
        if ($Param{GetParam}->{$_} &amp;&amp; $Param{GetParam}->{$_} =~ /$Match{$_}/i) {
            $Matched = $1 || '1';
            if ($Self->{Debug} > 1) {
                $Self->{LogObject}->Log(
                    Priority => 'debug',
                    Message => "'$Param{GetParam}->{$_}' =~ /$Match{$_}/i matched!",
                );
            }
        }
        else {
            $MatchedNot = 1;
            if ($Self->{Debug} > 1) {
                $Self->{LogObject}->Log(
                    Priority => 'debug',
                    Message => "'$Param{GetParam}->{$_}' =~ /$Match{$_}/i matched NOT!",
                );
            }
        }
    }
    # should I ignore the incoming mail?
    if ($Matched &amp;&amp; !$MatchedNot) {
        for (keys %Set) {
            if ($Set{$_} =~ /\[\*\*\*\]/i) {
                $Set{$_} = $Matched;
            }
            $Param{GetParam}->{$_} = $Set{$_};
            $Self->{LogObject}->Log(
                Priority => 'notice',
                Message => "Set param '$_' to '$Set{$_}' (Message-ID: $Param{GetParam}->{'Message-ID'}) ",
            );
        }
    }

    return 1;
}

1;
            ]]></programlisting>
            </para>
            <para>
The following image shows you the email processing flow.
            <screenshot>
            <graphic srccredit="" scale="60" fileref="screenshots/email-processing.png"></graphic>
            </screenshot>
            </para>
        </section>
        <section id="ticket-module-menu">
            <title>Ticket Menu Module</title>
            <para>
To add links in the ticket menu, just use ticket menu modules.
            </para>
            <para>
If you want to create your own ticket menu link, just create your own module.
These modules are located under "Kernel/Output/HTML/TicketMenu*.pm".
For default modules see the admin manual. You just need two functions:
new() and Run():
            </para>
            <para>
The following example shows you how to show a lock or a unlock ticket link.
            </para>
            <para>
Kernel/Config.pm:
            </para>
            <para>
            <programlisting><![CDATA[
# for ticket zoom menu
$Self->{'Ticket::Frontend::MenuModule'}->{'100-Lock'} =  {
    Action => 'AgentTicketLock',
    Module => 'Kernel::Output::HTML::TicketMenuLock',
    Name   => 'Lock'
};

# for ticket preview menu
$Self->{'Ticket::Frontend::PreMenuModule'}->{'100-Lock'} =  {
    Action => 'AgentTicketLock',
    Module => 'Kernel::Output::HTML::TicketMenuLock',
    Name   => 'Lock'
};
            ]]></programlisting>
            </para>
            <para>
Format:
            </para>
            <para>
            <programlisting><![CDATA[
# --
# Kernel/Output/HTML/TicketMenuLock.pm
# Copyright (C) (year) (name of author) (email of author)
# --
# $Id: module-format.xml,v 1.2 2011-07-26 17:01:01 cr Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (AGPL). If you
# did not receive this file, see http://www.gnu.org/licenses/agpl.txt.
# --

package Kernel::Output::HTML::TicketMenuLock;

use strict;
use warnings;

use vars qw(@ISA $VERSION);
$VERSION = qw($Revision: 1.2 $) [1];

# --
sub new {
    my ( $Type, %Param ) = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);

    # get needed objects
    for (qw(ConfigObject LogObject DBObject LayoutObject UserID TicketObject)) {
        $Self->{$_} = $Param{$_} || die "Got no $_!";
    }

    return $Self;
}
# --
sub Run {
    my ( $Self, %Param ) = @_;
    # check needed stuff
    if (!$Param{Ticket}) {
        $Self->{LogObject}->Log(Priority => 'error', Message => 'Need Ticket!');
        return;
    }

    # check permission
    if ($Self->{TicketObject}->LockIsTicketLocked(TicketID => $Param{TicketID})) {
        my $AccessOk = $Self->{TicketObject}->OwnerCheck(
            TicketID => $Param{TicketID},
            OwnerID => $Self->{UserID},
        );
        if (!$AccessOk) {
            return $Param{Counter};
        }
    }

    $Self->{LayoutObject}->Block(
        Name => 'Menu',
        Data => { },
    );
    if ($Param{Counter}) {
        $Self->{LayoutObject}->Block(
            Name => 'MenuItemSplit',
            Data => {  },
        );
    }
    if ($Param{Ticket}->{Lock} eq 'lock') {
        $Self->{LayoutObject}->Block(
            Name => 'MenuItem',
            Data => {
                %{$Param{Config}},
                %{$Param{Ticket}},
                %Param,
                Name => 'Unlock',
                Description => 'Unlock to give it back to the queue!',
                Link => 'Action=AgentTicketLock&amp;Subaction=Unlock&amp;TicketID=$QData{"TicketID"}',
            },
        );
    }
    else {
        $Self->{LayoutObject}->Block(
            Name => 'MenuItem',
            Data => {
                %{$Param{Config}},
                %Param,
                Name => 'Lock',
                Description => 'Lock it to work on it!',
                Link => 'Action=AgentTicketLock&amp;Subaction=Lock&amp;TicketID=$QData{"TicketID"}',
            },
        );
    }
    $Param{Counter}++;
    return $Param{Counter};
}
# --
1;
            ]]></programlisting>
            </para>
        </section>
        <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="module-format/ticketevent.xml" />
        <section id="more-modules">
            <title>More Modules</title>
            <para>
The Agent Ticket Permission Modules (Kernel/System/Ticket/Permission/) contain functions to verify
an agent's authorisation to access a ticket.
            </para>
            <para>
The Customer Ticket Permission Modules (Kernel/System/Ticket/CustomerPermission/) contain functions
to verify a customer's authorisation to access a ticket.
            </para>
            <para>
The Article Module (Kernel/System/Ticket/Article.pm) facilitates the readout and generating of ticket articles.
            </para>
            <para>
More modules and their descriptions are listed under <ulink url="http://dev.otrs.org/">http://dev.otrs.org/</ulink>
            </para>
        </section>
    </section>
    </section>
</section>
