<chapter id="dev-custom-modules">
<title>Developer's guide - Writing OTRS Modules</title>
<para>
This chapter will show you more details about writing common OTRS Modules. 
</para>
<para>

</para>

<section id="dev-custom-modules-notify">
<title>AgentInterface Notification Modules</title>
<para>
With notification modules you can inform agents about new infos. A normal navigation looks like that:
<screenshot>
<screeninfo>navigation</screeninfo>
<graphic srccredit="navigation - screenshot" scale="40" fileref="screenshots/agent-notification-without.png"></graphic>
</screenshot>
</para>
<para>
Example of a simple notification module, save it under Kernel/Output/HTML/NotificationMotd.pm. 
<programlisting>
# --
# Kernel/Output/HTML/NotificationMotd.pm - message of the day  
# Copyright (C) 2003 Hans Mueller mail@example.com
# --
# $Id: developer-guide-custom-modules.sgml,v 1.1 2003-12-05 00:24:56 martin Exp $
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see http://www.gnu.org/licenses/gpl.txt.
# --

package Kernel::Output::HTML::NotificationMotd;

use strict;

# --
sub new {
    my $Type = shift;
    my %Param = @_;

    # allocate new hash for object
    my $Self = {};
    bless ($Self, $Type);

    # get needed objects
    foreach (qw(ConfigObject LogObject DBObject LayoutObject UserID)) {
        $Self->{$_} = $Param{$_} || die "Got no $_!";
    }
    return $Self;
}
# --
sub Run {
    my $Self = shift;
    my %Param = @_;
    return $Self->{LayoutObject}->Notify(Info => 'Some daily news!');
}
# --

1;
</programlisting>
To use this module, add the following to the Kernel/Config.pm and restart your webserver (if you use mod_perl). 
<programlisting>

    # Frontend::NotifyModule - module name (50-Motd)
    $Self->{'Frontend::NotifyModule'}->{'50-Motd'} = {
        Module => 'Kernel::Output::HTML::NotificationMotd',
    };

</programlisting>
The result will be a notification box in your agent interface:
<screenshot>
<screeninfo>navigation</screeninfo>
<graphic srccredit="navigation - screenshot" scale="40" fileref="screenshots/agent-notification.png"></graphic>
</screenshot>
Normally you want to put more intelligence into your notification module. This kind of modules are useful for escalation infos.
</para>
<para>
Default notification modules are:
<programlisting>

    # agent interface notification module to check the used charset
    $Self->{'Frontend::NotifyModule'}->{'1-CharsetCheck'} = {
        Module => 'Kernel::Output::HTML::NotificationCharsetCheck',
    };

    # agent interface notification module to check the admin user id
    # (don't work with user id 1 notification)
    $Self->{'Frontend::NotifyModule'}->{'2-UID-Check'} = {
        Module => 'Kernel::Output::HTML::NotificationUIDCheck',
    };

</programlisting>
</para>
</section>

<section id="dev-custom-modules-auth">
<title>Agent Auth Modules</title>
<para>
...
</para>
</section>

<section id="dev-custom-modules-cauth">
<title>Customer Auth Modules</title>
<para>
...
</para>
</section>

<section id="dev-custom-modules-cuser">
<title>Customer User Modules</title>
<para>
...
</para>
</section>

<section id="dev-custom-modules-postmaster">
<title>PostMaster Filter Modules</title>
<para>
...
</para>
</section>

<section id="dev-custom-modules-permission">
<title>Agent Ticket Permission Modules</title>
<para>
...
</para>
</section>

<section id="dev-custom-modules-cpermission">
<title>Customer Ticket Permission Modules</title>
<para>
...
</para>
</section>

</chapter>
